
#ifndef QWY2_HEADER_CHUNK_
#define QWY2_HEADER_CHUNK_

#include "opengl.hpp"
#include "nature.hpp"
#include "coords.hpp"
#include "mesh.hpp"
#include "shaders/classic/classic.hpp"
#include <glm/vec3.hpp>
#include <vector>
#include <array>
#include <unordered_map>
#include <ostream>

namespace qwy2
{

/* Describes the state of one voxel in a grid of voxels. */
class Block
{
public:
	bool is_air;
	unsigned int type_index;

public:
	Block();
	void generate_face(Nature const& nature, BlockFace const& face,
		std::vector<VertexDataClassic>& dst) const;
};

/* Isolated chunk data that can be generated by a separate thread. */
class IsolatedChunk
{
public:
	ChunkCoords chunk_coords;
	BlockRect rect;
	std::vector<Block> block_grid;
	bool is_all_air;
	std::vector<VertexDataClassic> vertex_data;
};

IsolatedChunk* generate_chunk(ChunkCoords chunk_coords, BlockRect rect, Nature const& nature);

class Chunk
{
public:
	Mesh<VertexDataClassic> mesh;
	BlockRect rect;
	bool is_all_air;
	bool is_generated;
	bool is_just_generated;
private:
	std::vector<Block> block_grid;

public:
	Chunk(BlockRect rect);
	Block& block(BlockCoords const& coords);
	Block const& block(BlockCoords const& coords) const;
	void recompute_mesh(Nature const& nature);
	void add_common_faces_to_mesh(Nature const& nature,
		ChunkFace chunk_face, Chunk& touching_chunk);

	friend class ChunkGrid;
};

class ChunkGrid
{
public:
	int chunk_side; /* Should stay signed, and must be odd. */
	std::unordered_map<ChunkCoords, Chunk*, ChunkCoords::Hash> table; /* Center to chunk. */

public:
	ChunkGrid();
	ChunkGrid(int chunk_side);

	ChunkCoords containing_chunk_coords(BlockCoords coords) const;
	BlockRect chunk_rect(ChunkCoords chunk_coords) const;

	BlockCoords containing_chunk_center_coords(BlockCoords coords) const;
	BlockRect containing_chunk_rect(BlockCoords coords) const;
	BlockRect containing_chunk_rect(glm::vec3 coords) const;

	Chunk* chunk(ChunkCoords chunk_coords);
	Chunk const* chunk(ChunkCoords chunk_coords) const;
	Chunk* containing_chunk(BlockCoords coords);
	Chunk const* containing_chunk(BlockCoords coords) const;
	Chunk* containing_chunk(glm::vec3 coords);
	Chunk const* containing_chunk(glm::vec3 coords) const;

	Chunk* add_generated_chunk(IsolatedChunk* generating_chunk, ChunkCoords chunk_coords,
		Nature const& nature);

	bool block_is_air_or_not_generated(BlockCoords coords) const;
};

} /* qwy2 */

#endif /* QWY2_HEADER_CHUNK_ */
